import asyncio
import pytz
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from db import init_db, add_user, get_all_users
from schedule import schedule
from furri import get_random_furry_image



TOKEN = "8132234913:AAGmrItgHHGqjMAwPJaJAMQj5PTkz5RDWMk"

bot = Bot(token=TOKEN)
dp = Dispatcher()

moscow_tz = pytz.timezone("Europe/Moscow")

# –°–ª–æ–≤–∞—Ä—å —Å–æ–∫—Ä–∞—â—ë–Ω–Ω—ã—Ö –∏ –ø–æ–ª–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
DAY_NAMES = {
    "–ü–ù": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
    "–í–¢": "–í—Ç–æ—Ä–Ω–∏–∫",
    "–°–†": "–°—Ä–µ–¥–∞",
    "–ß–¢": "–ß–µ—Ç–≤–µ—Ä–≥",
    "–ü–¢": "–ü—è—Ç–Ω–∏—Ü–∞",
    "–°–ë": "–°—É–±–±–æ—Ç–∞",
    "–í–°": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
}


def get_day(offset=0) -> str:
    days = ["–ü–ù", "–í–¢", "–°–†", "–ß–¢", "–ü–¢", "–°–ë", "–í–°"]
    today = datetime.now(moscow_tz).date()
    idx = (today.weekday() + offset) % 7
    return days[idx]

def format_schedule(day: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –¥–Ω—è"""
    full_day = DAY_NAMES.get(day, day)  # –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ

    if day == "–í–°":
        return "–í—ã—Ö–æ–¥–Ω–æ–π!"

    lessons = schedule.get(day, [])
    if not lessons:
        return f"üì≠ –ù–∞ {full_day} –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç"

    text = f"üìÖ {full_day}, –≥—Ä—É–ø–ø–∞ 10903723.\n"
    for lesson in lessons:
        t = lesson["time"]
        subj = lesson["subject"]
        room = lesson["room"]
        teacher = lesson["teacher"]
        frame = lesson["frame"]
        ltype = lesson.get("type", "")

        if ltype:
            text += f"\n‚è∞ {t}\n      ‚Ä¢ ({ltype}) {subj} {teacher} –∞ {room}, –∫–æ—Ä–ø. {frame}\n"
        else:
            text += f"\n‚è∞ {t}\n      ‚Ä¢ {subj} {teacher} –∞ {room}, –∫–æ—Ä–ø. {frame}\n"

    return text


def reply_menu():
    kb = [
        [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

def main_menu():
    today = get_day(0)
    tomorrow = get_day(1)

    kb = [
        [InlineKeyboardButton(text=f"üóìÔ∏è –°–µ–≥–æ–¥–Ω—è ({today})", callback_data="today"),
         InlineKeyboardButton(text=f"üóìÔ∏è –ó–∞–≤—Ç—Ä–∞ ({tomorrow})", callback_data="tomorrow")],
        [InlineKeyboardButton(text="üìñ –í—ã–±—Ä–∞—Ç—å –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏", callback_data="choose_day")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)

def days_menu(row_size: int = 2):
    days = ["–ü–ù", "–í–¢", "–°–†", "–ß–¢", "–ü–¢", "–°–ë"]
    kb = []
    for i in range(0, len(days), row_size):
        row = [
            InlineKeyboardButton(text=day, callback_data=f"day_{day}")
            for day in days[i:i+row_size]
        ]
        kb.append(row)

    kb.append([InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_main")])
    return InlineKeyboardMarkup(inline_keyboard=kb)


# ====================== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ ======================

def get_user_name(user: types.User) -> str:
    if user.first_name:
        return user.first_name
    elif user.username:
        return f"@{user.username}"
    return "–°—Ç—É–¥–µ–Ω—Ç"


# ====================== –•—ç–Ω–¥–ª–µ—Ä—ã ======================

@dp.message(Command("all"))
async def all_users_handler(message: types.Message):
    users = get_all_users()
    if not users:
        await message.answer("–í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    text = "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –±–∞–∑–µ:\n\n"
    for user_id, username in users:
        text += f"ID: {user_id}, username: @{username if username else '–Ω–µ—Ç'}\n"

    await message.answer(text)


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    add_user(message.from_user.id, message.from_user.username)
    name = get_user_name(message.from_user)

    text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, <b>{name}</b>!\n\n"
        f"–≠—Ç–æ –±–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (<b>cveulxd</b>) üìö\n"
        f"–ì—Ä—É–ø–ø–∞: <b>10903723</b>\n\n"
        f"–í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ üëá"
    )

    await message.answer(
        text,
        reply_markup=main_menu(),  # inline –º–µ–Ω—é
        parse_mode="HTML"
    )

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await message.answer("–î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá", reply_markup=reply_menu())

@dp.message(lambda msg: msg.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def reply_main_menu(message: types.Message):
    name = get_user_name(message.from_user)
    text = (
        f"üè´ <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
        f"–ü—Ä–∏–≤–µ—Ç, <b>{name}</b>! –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã <b>10903723</b>.\n"
        f"–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –Ω–∏–∂–µ üëá"
    )

    await message.answer(text, reply_markup=main_menu(), parse_mode="HTML")

# ====================== Callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ======================

@dp.callback_query()
async def callbacks(call: types.CallbackQuery):
    data = call.data

    if data == "today":
        await call.message.edit_text(format_schedule(get_day(0)), reply_markup=main_menu())
    elif data == "tomorrow":
        await call.message.edit_text(format_schedule(get_day(1)), reply_markup=main_menu())
    elif data == "choose_day":
        await call.message.edit_text(
            "üìÖ <b>–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏</b>\n\n"
            "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å.\n"
            "–í—Å–µ –∑–∞–Ω—è—Ç–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã <b>10903723</b>.",
            reply_markup=days_menu(row_size=3),
            parse_mode="HTML"
        )
    elif data.startswith("day_"):
        day = data.split("_", 1)[1]
        await call.message.edit_text(format_schedule(day), reply_markup=main_menu())
    elif data == "back_main":
        name = get_user_name(call.from_user)
        await call.message.edit_text(
            f"üè´ <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
            f"–ü—Ä–∏–≤–µ—Ç, <b>{name}</b>! –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã <b>10903723</b>.\n"
            f"–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –Ω–∏–∂–µ üëá",
            reply_markup=main_menu(),
            parse_mode="HTML"
        )
    elif data == "furry_test":
        img_url = get_random_furry_image()
        if img_url:
            await call.message.answer_photo(img_url, caption="–¢—ã ü¶ä")
        else:
            await call.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ—É—Ä—Ä–∏ :(", show_alert=True)


# ====================== –ó–∞–ø—É—Å–∫ ======================

async def main():
    init_db()
    await dp.start_polling(bot, skip_updates=True)

if __name__ == "__main__":
    asyncio.run(main())
